import { expect } from "../chai-setup";
import { Contract } from "ethers";
import { ethers } from "hardhat";
import * as abi from "../../artifacts/src/Box.sol/Box.json";

describe("Box tests", () => {
  const bytecode =
    "0x608060405234156100135761001261003b565b5b61001b61011e565b610023610031565b610369610139823961036981f35b6000604051905090565b600080fd5b6000819050919050565b6000819050919050565b6000819050919050565b600061007961007461006f84610040565b610054565b61004a565b9050919050565b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6100b984610080565b9350801983169250808416831791505092915050565b60006100ea6100e56100e08461004a565b610054565b61004a565b9050919050565b6000819050919050565b610104826100cf565b610117610110826100f1565b835461008d565b8255505050565b600a6101298161005e565b6101348160006100fb565b505056fe60806040526004361061006457610017600035610071565b80630c55699c811461003e57636057361d811461004b57636d4ce63c811461005857610061565b61004661013f565b610061565b6100536101de565b610061565b610060610218565b5b50505b61006c610252565b610332565b60008160e01c9050919050565b6000604051905090565b600080fd5b600080fd5b600081830312156100a6576100a561008d565b5b5050565b600082821c905092915050565b6000819050919050565b60006100d86100d383600886026100aa565b6100b7565b905092915050565b60006100ed8383546100c1565b905092915050565b600080600061010481836100e0565b9250505090565b6000819050919050565b61011e8161010b565b82525050565b60006020820190506101396000830184610115565b92915050565b341561014e5761014d610088565b5b610159366004610092565b6101616100f5565b61016961007e565b6101738282610124565b81810382f35b6101828161010b565b811461018d57600080fd5b50565b60008135905061019f81610179565b92915050565b6000602082840312156101bb576101ba61008d565b5b60006101c984828501610190565b91505092915050565b60008082019050919050565b34156101ed576101ec610088565b5b6101f83660046101a5565b610201816102ff565b61020961007e565b610212816101d2565b81810382f35b341561022757610226610088565b5b610232366004610092565b61023a610316565b61024261007e565b61024c8282610124565b81810382f35b600080fd5b60008160001b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61029084610257565b9350801983169250808416831791505092915050565b6000819050919050565b60006102cb6102c66102c18461010b565b6102a6565b61010b565b9050919050565b6000819050919050565b6102e5826102b0565b6102f86102f1826102d2565b8354610264565b8255505050565b808061030c8160006102dc565b505050565b600090565b6000610320610311565b80915060005460005260206000f35090565bfea2646970667358221220689264ccb29721a85b8989f35cf7ce5783e1c7b16163bfcea65be40c65761b9464736f6c63430008110033";
  let box: Contract;

  before(async () => {
    const Contract = await ethers.getContractFactory(abi.abi, bytecode);
    box = await Contract.deploy();
    await box.deployed();
  });

  it("Should test box", async () => {
    const num = await box.get();
    expect(num.toString()).to.eq("10");

    expect((await box.x()).toString()).to.eq("10");

    const tx = await box.store("100");
    await tx.wait();
    expect((await box.get()).toString()).to.eq("100");
  });
});
